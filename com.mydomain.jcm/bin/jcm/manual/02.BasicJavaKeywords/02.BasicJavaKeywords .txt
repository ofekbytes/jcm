

01. java keywords
01.01. package
02.01. import
02.02. static import
03.01. class
04.01. method
05.01. variable (storage) and method
06.01. annotation symbol -or- @ symbol -or- AT symbol .
07.01. naming convention
08.01. dot <.> -and- colon <;>
09.01. summary
10.01. constructor
.
.
01. java keywords

-- package
-- import
-- class
-- method


-- public
-- colon
-- void 
-- object
-- @Test
-- constructor
-- CamelCase
-- variable declaration
-- variable
-- dot
-- object allocation



.
.
01.01. package -
 
  package structure - is a file structure that organize different files in your program.
  top package structure (root) is usually a backward domain name.
  
-- example
   com.domain.myJava
   
  a name of the program file is a combination of the program name 
  and full package structure of the package is reside in.

- package name format: lower-case
  ( declare package name with lower case ).

- package name is a subject description name or business description topic.

-- example:
   com.domain.myJava.example1


- Summary: 

- package name: 
-- backward domain name + program name -or- description topic name.
-- package name can be a subject description name -or- business description topic.

- package name format: lower-case
.
.
02.01. import -
 
- every program file will reuse an exit code 
  by importing that code in to your program files
  
  import package will be declared beneath/under the package declaration name.


-- example: import class file name from a package

	// line 1 // package declaration name
    com.domain.myJava.example1.shop
    
    // line 2 // import class file name "parent" 
    import com.domain.myJava.example1.book.parent 
   
   
-- example: import all/* class files in a package (using the star <*> character.
   
   // all = *
   import com.domain.myJava.example1.book.*
   
.
.
02.02. static import - 

- static import is 

-- example:
   static import org.junit.Assert.*;

--- continue in file....
.
.
03.01. class

- simple program can consist of many code lines, 
  it's important to impose a structure of the program code.

- a class (like a package) make the program code classified into different unit of code.
  the programmer will decide how to name and structure the packages/classes.

- client and programmer relationship and common language - 
  improve cooperation between business client and programmers.
  the client say what he wants the program to do and the programmer will express it in code.


-- example:
   class Car { 
   }   

- create a class:
-- class name will start with Capital Letter "Example".
-- '{' - open curly branch -  define the beginning of the definition of the class 
-- '}' - closing curly branch -  define the end of the definition of the class
-- '{ code; }' - write the code between the '{' -(open curly branch) -and- '}' -(closing curly branch).

-- class need to be focus in one subject.
-!- keep your class as small as possible to improve usability and readability.
-!- a class consist/contain of one or more method.

-- example:
   class Car { 
   }   


- Summary: 

- package name: description topic/subject name.
- package name format: start with Capital Letter "Example".
.
.
04.01. method (function)

- a class consist/contain of one or more method.
  each method archive a purpose.

- a method name is word that describe the purpose of the method.
  a method define the action you can execute inside classes.
  method can operate with number, text, color, sound and more.

-- example: call a method.

   add(2,2); 
   /// output: 4
   
   add("abc","c")
   /// output: abc
   
   print("hello");
   /// output: hello
   
- programming idea is like a book idea 
-- a book have a chapter.
-- a chapter have a paragraph.
-- a paragraph have a sentences.

-- chapter - java package name.
-- paragraph - java class .
-- sentences - java method.

- method can call other method, 
  it will create (forms) an of hierarchy method  (Chaining of methods) 
  calling each other.
  
- as a programmer you need to decide how you want to structure your code, method length, 
  which method will use which sub method.
  
- write a method hierarchy programming code like writing a book. 
   
-!- making instruction/comment inside a programming code is important
  

-- example: method hierarchy
   
   MakeDinner() {
   
      \\ Main Method
      MakeAppetizer(); \\-1-
      MakeMainCourse(); \\-2-
      MakeDessert(); \\-3-
      
      \\ Sub Method.
      MakeRice(); \\-4-
      MakeSchnitzel(); \\-5-
   } 
   
   \\ -1-
   MakeAppetizer() {
      MakeSalad();
   }
   
   \\ -2-
   MakeMainCourse() {
      MakeRice();
      MakeMashedPotatoes();
      MakeSchnitzel();
   }
   
   \\ -3-
   MakeDessert() {
      MakeCake();
   }


--- example: method
	<jcm.examples.basic.food.*>
	<jcm.examples.basic.food.MakeDinner.java>
	
	
-!- mixing level of abstraction mean calling sub method without using main method
	calling MakeRice() -and- MakeSchnitzel() without using MakeMainCourse() method.
	
   MakeDinner() {
      MakeRice();
      KakeSchnitzel();
   } 

- method size: 1-3 lines.
- method maximum size: 20 lines.

- create a method:
-- method name will start with a lower case letter "methodExample".
-- method parameters (input fields) declared inside brackets, 
   between '(' - open brackets -and- ')' - closing brackets.
   we can declared many method parameters (input fields) between 0-N (a lot of fields). 
   
-- '{' - open curly branch -  define the beginning of the definition of the method 
-- '}' - closing curly branch -  define the end of the definition of the method
-- '{ code; }' - write the code between the '{' -(open curly branch) -and- '}' -(closing curly branch).

-- method parameters - a method parameters is a variable/s inside method definition.
-- method parameters size: 3-5 parameters per method.

-- method arguments - when calling a method with input values, 
                      we are calling a method with method arguments.

--- example: method parameters -and- method arguments. 

   // method with parameter/s //
	public int addMethod(int methodParameterOne, int methodParameterTwo) {
		return methodParameterOne + methodParameterTwo;
	}

	public static void main(String[] args) {

		int methodArgumentOne = 3;
		int methodArgumentTwo = 7;

		// calling method with argument //
		Ex_04_02_methodParameterArgument c = new Ex_04_02_methodParameterArgument();
		System.out.println(c.addMethod(methodArgumentOne, methodArgumentTwo));

--- example: method parameters -and- method arguments.
	<Ex_04_01_class_method>
    <Ex_04_02_methodParameterArgument>

.
.
05.01. variable (storage) and method

- variable -  a variable is a value placeholder that can be set.
-- variable value can be changed while the program is running.
-- variable can be used as input -or- output value of method/s.
-- variable can be declared/set in different data type/s like number, text, etc..
-- variable Names can contain letters, digits, underscores, and dollar signs
-- variable Names must begin with a letter
-- variable Names start with a lower case letter "variableExample"

--- example: variable/s name/s
	myOldCar
	myNewCar
	myWorkCar


//// TODO ////
- variable data types: 
-- instance variable 
-- static variable
-- local variable
-- parameters
-- argument

.
.
- access modifier
-- public - public access modifier define any class from any package may use this class 
            or method for public access modifier. 
-- private - private access modifier //// TODO ////
-- default - default access modifier //// TODO //// 
-- protected - protected access modifier //// TODO ////


--- example: public access modifier 

	// class - public access define
	public class Cake {
	
		// method - public access define
		public makeCake() {
			System.out.println("MakeCake");
		}
	}


- method return value - a method need to have a return value 
-- value 
-- no-value / void


- method return value type:
-- void - no value return (return no value).
-- int - //// TODO ////
..
..


- method rules:
-- Queries methods - (getter) - return a value but don't alter the state.
-- commands methods - (setter) - alter the state but don't return a value.


--- example: makeCake() method is a "command method" and return no value (void).

	public class Cake {		
		public void makeCake() {
			System.out.println("MakeCake");
		}
	}

.
.
06.01. annotation symbol -or- @ symbol -or- AT symbol . 

- The AT symbol '@' symbol indicate annotation. 

- Using the @ symbol (annotation symbol) to declare/describe the method purpose.
--- example: @Test annotation indicate that a given method will be used as a test.

--- example: @Test

	public class Cake {
		@Test		
		public void makeCake() {
			System.out.println("MakeCake");
		}
	}


- Annotation Symbol list
	@Deprecated
	@Documented
	@FunctionalInterface
	@Inherited
	@Native
	@Override
	@Repeatable
	@Retention
	@SafeVarargs
	@SuppressWarnings
	@Target

.
.
07.01. naming convention

- camelCase - 
-- if class name -or- method name -or- variable name, 
   consist/contain more than one word, we will use upperCase to indicate a beginning of a new word.

--- example: Class camelCase:
    ClassName
    
--- example: method camelCase:
    methodName

--- example: variable camelCase:
    variableExample

.
.  
- camel_hump - 
-- if class name -or- method name -or- variable name, 
   consist/contain more than one word, we will use underscore to indicate a beginning of a new word.
   
--- example: variable camel_hump:
    camel_hump_variable
    
.
.
08.01. dot <.> -and- colon <;>
.
.
- dot '.' - 

-- dot in a variable 'eat' and the method 'lunch' indicate execute call method 'lunch' from 'eat' variable.

--- example: dot between a variable 'eat' and the method 'lunch' indicate: 
             "execute method "lunch()" from "eat" variable.
 
    eat.lunch();
    
//---[Unsorted Data]----
.
.	
- colon ';' -	
-- indicate end statement in java.

--- example: 
    eat.lunch();	
	
--- example: class 'Car'

	public class Car {	
		@Test  
		public void speed(int speed) {
			System.out.println("Car Speed is: " + speed);		
		}
		
		public void MaxSpeed() {
			car.speed(80); 
		}	
	}

.
.
09.01. summary
 
.  
.
- Class -

-- a class is a ways of structuring coded in java, a unit of code.
-- a class is like a template, like a definition for what the class would do for you letter on. 
   when the program is running the class "car" (for example) define the behaviour of a "car".  

-- when the program is running we see on run time that there will be a number of cars.
   each car may have a unique set of values.
   one car might leak oil, so the value of oil equal to zero (oil==0) when the program is running.

-- a class is like an animal DNA that have the definition of the animal needed to be created when the program is running.
 
.
.
- Object

-- when a java program is running is create a certain number of object that exist as set of values in the computer memory.
   those value may change while the program is running.

.
.
- Object Oriented language - 

-- java is an object oriented language, everything is focused around object.

-- java writing classes is a way of defining a model, which focuses on necessary aspect to solve a specific problem.

-- a programmer need to fully understand a problem and get a model out of it and transfer this model into class.

-- when a programmer write a program that is more accurate, 
--- less code need to be written and maintained, 
--- less error a program will have 
--- the program will run faster.

-- the power of java is to be able define and execute table model.
   like a virtual machine on your computer with concepts and names from the real world.

-- example: object oriented language 

   // class:

   class Car(age, maxSpeed)
   
   
   /// objects:
   
   // #1 //
   Car car = new Car();
   car.speed(120);

   // #2 //
   Car secondCar = new Car();
   secondCar.speed(100);
   
   // #3 // 
   Car thirdCar = new Car();
   thirdCar.speed(140);

.
.
10.01. constructor

-- class and object that will be created from that classes.
-- a method that will create an object from us.
   a constructor is special method it is called on a class and it will create an object every time we call this method. 

-- when the object created/exist we cannot call this method (constructor anymore (a method used once).

-- a constructor construct object from class files.

--- example: 
    create a new object of Car() class;
    a constructor in this case, just like a method give a number value.
    
    = new Car(120); 


--  when the program is running and execute this line a new object will be created in the computer memory.
    Car testCar = new Car(120);
    
--- example:

    public class Car {
       public Car(int speed) { System.out.println("speed: " + speed ); }
    }

    new Car(120);

    //// Car testCar = new Car(120); ////

.
.
- variable declaration

-- define a variable before using it.
    
-- variable declaration - declare a variable myCar of the type Car.
   Car myCar;
	
-- object allocation - the variable is declare and needed to be allocated to the object we created.
	
-- variable declaration + object creation + allocation in a single line ;
    Car myCar = new Car(120);
	
-- when the program is running this line read like that
-1- create an object type Car with speed value argument.
    new Car(120);
    
-2- create a variable of type Car and give it a name 'myCar'
    Car myCar
    
-3- assign Car object to the variable name myCar.
    Car myCar = new Car(120);

-=- when using myCar variable, we reference the object created in memory	

-!- we have a value into a constructor of car, without looking inside code of the Class Car 
    we will not know what is the meaning of the value. (value = 120).
    Car myCar = new Car(120);

-!- limit the number of variable used inside a method .
    120 means the speed of the car.

-!- the less variable inside a method the better.


