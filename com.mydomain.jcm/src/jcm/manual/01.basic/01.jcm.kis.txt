

01. java keywords
01.01. package -
02.01. import -
02.02. static import - 
03.01. class
04.01. method

.
.
01. java keywords

copy paste ....
.
.
01.01. package -
 
- package name: 
-- backward domain name + program name -or- description topic name.
-- package name can be a subject description name -or- business description topic.

- package name format: lower-case
    
-- example: package root name (a backward domain name).
   com.domain.myJava

- a package make the program code classified into different unit of code. 

-- example:
   com.domain.myJava.example1 
.
.
02.01. import -

- every program file will reuse an exit code 
  by importing that code in to your program files
  
-- example: import class file name "parent" 
   import com.domain.myJava.example1.book.parent 
   
-- example: import all/* class files in a package
   import com.domain.myJava.example1.book.*
.
.
02.02. static import - 

- static import is 

-- example:
   static import org.junit.Assert.*;
.
.
03.01. class

- package name: description topic/subject name.
- package name format: start with Capital Letter "Example".

- simple program can consist of many code lines, 
  a class make the program code classified into different unit of code.
  
- create a class:
-- class name will start with Capital Letter "Example".
-- '{' - open curly branch -  define the beginning of the definition of the class 
-- '}' - closing curly branch -  define the end of the definition of the class
-- '{ code; }' - write the code between the '{' -(open curly branch) -and- '}' -(closing curly branch).

-- class need to be focus in one subject.
-!- keep your class as small as possible to improve usability and readability.
-!- a class consist/contain of one or more method.

-- example:
   class Car {
   }   
.
.
04.01. method (function)

- method name: a method description topic/subject name.
- method name format: start with lower case Letter "methodExample".


- a class consist/contain of one or more method.
  each method archive a purpose.
 
 - a method name is word that describe the purpose of the method.
   a method define the action you can execute inside classes.
   method can operate with number, text, color, sound and more.
   
-- example:

   add(2,2); 
   /// output: 4
   
   add("abc","c")
   /// output: abc
   
   print("hello");
   /// output: hello
   
 - a method name is word that describe the purpose of the method.
   a method define the action you can execute inside classes.
   method can operate with number, text, color, sound and more.
 
 - method can call other method (method calling each other).
 -  
 
- create a method:
-- method name will start with a lower case letter "methodExample".
-- method parameters (input fields) declared inside brackets, 
   between '(' - open brackets -and- ')' - closing brackets.
   we can declared many method parameters (input fields) between 0-N (3-5 parameters per method recommended). 
   
-- '{' - open curly branch -  define the beginning of the definition of the method 
-- '}' - closing curly branch -  define the end of the definition of the method
-- '{ code; }' - write the code between the '{' -(open curly branch) -and- '}' -(closing curly branch).

-- method parameters - a method parameters is a variable/s inside method definition.
-- method parameters size: 3-5 parameters per method.

-- method arguments - when calling a method with input values, 
                      we are calling a method with method arguments.

--- example: method parameters -and- method arguments.
	<Ex_04_01_class_method>
    <Ex_04_02_methodParameterArgument>
.
.
05.01. variable (storage) and method
    
- variable -  a variable is a value placeholder that can be set. 
-- variable value can be changed while the program is running.
-- variable as input/output value of method/s.
-- variable declared with different data type/s (number, text, ...)
-- variable Names start with a lower case letter (example: "variableExample").

--- example: variable/s name/s
	myOldPc
	myNewPc
	myWorkPc
.
.
- access modifier







