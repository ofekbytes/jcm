

01. java keywords
01.01. package
02.01. import
02.02. static import
03.01. class
04.01. method

.
.
01. java keywords

-- package
-- import
-- class
-- method


-- public
-- colon
-- void 
-- object
-- @Test
-- constructor
-- CamelCase
-- variable declaration
-- variable
-- dot
-- object allocation



.
.
01.01. package -
 
  package structure - organize different files in your program.
  top package structure (root) is usually a backward domain name.
  
-- example
   com.domain.myJava
   
  a name of the program file is a combination of the program name 
  and full package structure of the package is reside in.

-!- declare package name with lower case.

- package name is a subject description name or business description topic.

-- example:
   com.domain.myJava.example1


- Summary: 

- package name: backward domain name + program name -or- description topic name.
- package name format: lower-case

.
.
02.01. import -
 
- every program file will reuse an exit code 
  by importing that code in to your program files
  
  import package will be declared beneath/under the package declaration name.


-- example: import class file name from a package

	// line 1 // package declaration name
    com.domain.myJava.example1.shop
    
    // line 2 // import class file name "parent" 
    import com.domain.myJava.example1.book.parent 
   
   
-- example: import all/* class files in a package (using the star <*> character.
   
   // all = *
   import com.domain.myJava.example1.book.*
   
.
.
02.02. static import - 

- static import is 

-- example:
   static import org.junit.Assert.*;

.
.
03.01. class

- simple program can consist of many code lines, 
  it's important to impose a structure of the program code.

- a class (like a package) make the program code classified into different unit of code.
  the programmer will decide how to name and structure the packages/classes.

- client and programmer relationship and common language - 
  improve cooperation between business client and programmers.
  the client say what he wants the program to do and the programmer will express it in code.

-- class name will start with Capital Letter "Example".
-- open curly branch '{' -  define the beginning of the definition of the class 
-- closing curly branch '}' -  define the end of the definition of the class
-- write the code between the open curly branch and closing curly branch.

-- class need to be focus in one subject.
-!- keep your class as small as possible to improve usability and readability.
-!- a class consist/contain of one or more method.

-- example:
   class Car {
   }   


.
.
04.01. method (function)

- a class consist/contain of one or more method.
  each method archive a purpose.

- a method name is word that describe the purpose of the method.
  a method define the action you can execute inside classes.
  method can operate with number, text, color, sound and more.

-- example: call a method.

   add(2,2); 
   /// output: 4
   
   add("abc","c")
   /// output: abc
   
   print("hello") = 
   /// output: hello
   
- programming idea is like a book idea 
-- a book have a chapter.
   a chapter have a paragraph.
   a paragraph have a sentences.

-- chapter - java package name.
   paragraph - java class .
   sentences - java method.

- method can call other method, 
  it will create (forms) an of hierarchy method  (Chaining of methods) 
  calling each other
  
- as a programmer you need to decide how you want to structure your code, method length, 
  which method will use which sub method.
  
- write a method hierarchy programming code like writing a book. 
   
-!- making instruction/comment inside a programming code is important
  

-- example: 
   
   MakeDinner() {
   
      \\ Main Method
      MakeAppetizer(); \\-1-
      MakeMainCourse(); \\-2-
      MakeDessert(); \\-3-
      
      \\ Sub Method.
      MakeRice(); \\-4-
      MakeSchnitzel(); \\-5-
   } 
   
   \\ -1-
   MakeAppetizer() {
      MakeSalad();
   }
   
   \\ -2-
   MakeMainCourse() {
      MakeRice();
      MakeMashedPotatoes();
      MakeSchnitzel();
   }
   
   \\ -3-
   MakeDessert() {
      MakeCake();
   }


-!- mixing level of abstraction mean calling sub method without using main method
	calling MakeRice() -and- MakeSchnitzel() without using MakeMainCourse() method.
	
   MakeDinner() {
      MakeRice();
      MakeSchnitzel();
   } 

   
   
   
   
   